{"version":3,"sources":["components/Header.js","components/Users.js","components/DisplayBoard.js","components/CreateUser.js","services/UserService.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Users","users","console","log","length","userTable","map","user","index","key","firstName","lastName","email","UserRow","DisplayBoard","numberOfUsers","getAllUsers","type","onClick","e","CreateUser","onChangeForm","createUser","htmlFor","onChange","name","id","aria-describedby","placeholder","a","fetch","response","json","data","method","headers","body","JSON","stringify","App","state","then","setState","target","value","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d4f1228.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n    return(\r\n        <div className=\"header\">\r\n            <h1>React With NodeJS</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const Users = ({users}) => {\r\n\r\n    console.log('users length:::', users.length)\r\n    if (users.length === 0) return null\r\n\r\n    const UserRow = (user,index) => {\r\n\r\n        return(\r\n              <tr key = {index} className={index%2 === 0?'odd':'even'}>\r\n                  <td>{index + 1}</td>\r\n                  <td>{user.firstName}</td>\r\n                  <td>{user.lastName}</td>\r\n                  <td>{user.email}</td>\r\n              </tr>\r\n          )\r\n    }\r\n\r\n    const userTable = users.map((user,index) => UserRow(user,index))\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <h2>Users</h2>\r\n            <table className=\"table table-bordered\">\r\n                <thead>\r\n                <tr>\r\n                    <th>User Id</th>\r\n                    <th>Firstname</th>\r\n                    <th>Lastname</th>\r\n                    <th>Email</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {userTable}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const DisplayBoard = ({numberOfUsers, getAllUsers}) => {\r\n    \r\n    return(\r\n        <div className=\"display-board\">\r\n            <h4>Users Created</h4>\r\n            <div className=\"number\">\r\n            {numberOfUsers}\r\n            </div>\r\n            <div className=\"btn\">\r\n                <button type=\"button\" onClick={(e) => getAllUsers()} className=\"btn btn-warning\">Get all Users</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\n\r\nconst CreateUser = ({onChangeForm, createUser }) => {\r\n\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-7 mrgnbtm\">\r\n                <h2>Create User</h2>\r\n                <form>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-md-6\">\r\n                            <label htmlFor=\"exampleInputEmail1\">First Name</label>\r\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)}  className=\"form-control\" name=\"firstname\" id=\"firstname\" aria-describedby=\"emailHelp\" placeholder=\"First Name\" />\r\n                        </div>\r\n                        <div className=\"form-group col-md-6\">\r\n                            <label htmlFor=\"exampleInputPassword1\">Last Name</label>\r\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"lastname\" id=\"lastname\" placeholder=\"Last Name\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-md-12\">\r\n                            <label htmlFor=\"exampleInputEmail1\">Email</label>\r\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"email\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Email\" />\r\n                        </div>\r\n                    </div>\r\n                    <button type=\"button\" onClick= {(e) => createUser()} className=\"btn btn-danger\">Create</button>\r\n                </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateUser","\r\nexport async function getAllUsers() {\r\n\r\n    const response = await fetch('/api/users');\r\n    return await response.json();\r\n}\r\n\r\nexport async function createUser(data) {\r\n    const response = await fetch(`/api/user`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({user: data})\r\n      })\r\n    return await response.json();\r\n}","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { Header } from './components/Header'\r\nimport { Users } from './components/Users'\r\nimport { DisplayBoard } from './components/DisplayBoard'\r\nimport CreateUser from './components/CreateUser'\r\nimport { getAllUsers, createUser } from './services/UserService'\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    user: {},\r\n    users: [],\r\n    numberOfUsers: 0\r\n  }\r\n\r\n  createUser = (e) => {\r\n      createUser(this.state.user)\r\n        .then(response => {\r\n          console.log(response);\r\n          this.setState({numberOfUsers: this.state.numberOfUsers + 1})\r\n      });\r\n  }\r\n\r\n  getAllUsers = () => {\r\n    getAllUsers()\r\n      .then(users => {\r\n        console.log(users)\r\n        this.setState({users: users, numberOfUsers: users.length})\r\n      });\r\n  }\r\n\r\n  onChangeForm = (e) => {\r\n      let user = this.state.user\r\n      if (e.target.name === 'firstname') {\r\n          user.firstName = e.target.value;\r\n      } else if (e.target.name === 'lastname') {\r\n          user.lastName = e.target.value;\r\n      } else if (e.target.name === 'email') {\r\n          user.email = e.target.value;\r\n      }\r\n      this.setState({user})\r\n  }\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <Header></Header>\r\n        <div className=\"container mrgnbtm\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8\">\r\n                <CreateUser \r\n                  user={this.state.user}\r\n                  onChangeForm={this.onChangeForm}\r\n                  createUser={this.createUser}\r\n                  >\r\n                </CreateUser>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n                <DisplayBoard\r\n                  numberOfUsers={this.state.numberOfUsers}\r\n                  getAllUsers={this.getAllUsers}\r\n                >\r\n                </DisplayBoard>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mrgnbtm\">\r\n          <Users users={this.state.users}></Users>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}